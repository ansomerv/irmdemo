name: Sync GitHub Labels to IRM Incident

on:
  issues:
    types: [labeled]

jobs:
  sync-label:
    runs-on: ubuntu-latest

    steps:
      - name: Extract IRM Incident ID
        id: extract
        run: |
          body="${{ github.event.issue.body }}"
          irm_incident_id=$(echo "$body" | tr -d '\r' | grep -Eio 'incident[ _]?id[^0-9]*[0-9]+' | grep -Eo '[0-9]+' | head -n1)

          if [ -z "$irm_incident_id" ]; then
            echo "No IRM Incident ID found, skipping sync."
            exit 0
          fi

          echo "IRM Incident ID: $irm_incident_id"
          echo "irm_incident_id=$irm_incident_id" >> $GITHUB_OUTPUT

      - name: Ensure IRM field and sync label
        if: ${{ steps.extract.outputs.irm_incident_id != '' }}
        env:
          IRM_API_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY_INCIDENT }}
          STACK_URL: https://ep.amer.cloud.demokit.grafana.com
        run: |
          label_raw="${{ github.event.label.name }}"
          label_color="${{ github.event.label.color }}"
          label_description="${{ github.event.label.description || '' }}"
          irm_incident_id="${{ steps.extract.outputs.irm_incident_id }}"

          # Determine key:value relationship
          if [[ "$label_raw" == *:* ]]; then
            key="${label_raw%%:*}"
            label="${label_raw#*:}"
            key=$(echo "$key" | xargs)
            label=$(echo "$label" | xargs)
          else
            key="githubLabel"
            label="$label_raw"
          fi

          echo "[STEP] Parsed label -> key='$key', label='$label'"

          # --- 1Ô∏è‚É£ Check if the field exists ---
          STATUS_CODE=$(curl -s -o fields.json -w "%{response_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $IRM_API_KEY" \
            "$STACK_URL/api/plugins/grafana-irm-app/resources/api/FieldsService.GetFields" \
            -d '{}')

          if [ "$STATUS_CODE" != "200" ]; then
            echo "[ERROR] Failed to fetch fields list. HTTP $STATUS_CODE"
            cat fields.json
            exit 42
          fi

          existing_uuid=$(jq -r --arg name "$key" '.fields[] | select(.name==$name) | .uuid' fields.json)

          # --- 2Ô∏è‚É£ If field doesn't exist, create it ---
          if [ -z "$existing_uuid" ] || [ "$existing_uuid" == "null" ]; then
            echo "[STEP] Creating label field '$key' (first time)..."
            slug=$(echo "$key" | tr '[:upper:] ' '[:lower:]_')
            selectoptions=$(jq -n --arg value "$label" --arg label "$label" '[{ value: $value, label: $label }]')

            payload=$(jq -n \
              --arg name "$key" \
              --arg slug "$slug" \
              --argjson selectoptions "$selectoptions" \
              '{
                field: {
                  name: $name,
                  slug: $slug,
                  type: "single-select",
                  domainName: "labels",
                  source: "incident",
                  archived: false,
                  version: 1,
                  selectoptions: $selectoptions
                }
              }')

            STATUS_CODE=$(curl -s -o create_field.json -w "%{response_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $IRM_API_KEY" \
              "$STACK_URL/api/plugins/grafana-irm-app/resources/api/FieldsService.AddField" \
              -d "$payload")

            if [ "$STATUS_CODE" = "200" ]; then
              echo "[OUTPUT] Successfully created label field '$key'"
            else
              echo "[ERROR] Failed to create label field '$key'. HTTP $STATUS_CODE"
              cat create_field.json
              exit 42
            fi
          else
            echo "[OUTPUT] Label field '$key' already exists (uuid=$existing_uuid)"
          fi

          # --- 3Ô∏è‚É£ Ensure the select option exists ---
          existing_option=$(jq -r --arg name "$key" --arg value "$label" \
            '.fields[] | select(.name==$name) | .selectoptions[]? | select(.value==$value) | .value' fields.json)

          if [ -z "$existing_option" ] || [ "$existing_option" == "null" ]; then
            echo "[STEP] Adding new select option '$label' to field '$key'..."
            payload=$(jq -n \
              --arg uuid "$existing_uuid" \
              --arg name "$key" \
              --arg value "$label" \
              --arg label "$label" \
              '{
                field: {
                  uuid: $uuid,
                  name: $name,
                  type: "single-select",
                  domainName: "labels",
                  source: "incident",
                  archived: false,
                  version: 1,
                  selectoptions: [{ value: $value, label: $label }]
                }
              }')

            STATUS_CODE=$(curl -s -o update_field.json -w "%{response_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $IRM_API_KEY" \
              "$STACK_URL/api/plugins/grafana-irm-app/resources/api/FieldsService.UpdateField" \
              -d "$payload")

            if [ "$STATUS_CODE" = "200" ]; then
              echo "[OUTPUT] Added select option '$label' to '$key'"
            else
              echo "[ERROR] Failed to add select option '$label' (HTTP $STATUS_CODE)"
              cat update_field.json
              exit 42
            fi
          else
            echo "[OUTPUT] Option '$label' already exists for '$key'"
          fi

          # --- 4Ô∏è‚É£ Add label to the incident ---
          echo "[STEP] Adding label '$label' to incident $irm_incident_id..."
          payload=$(jq -n \
            --arg incidentID "$irm_incident_id" \
            --arg key "$key" \
            --arg label "$label" \
            --arg colorHex "#$label_color" \
            --arg description "$label_description" \
            '{
              incidentID: $incidentID,
              label: {
                key: $key,
                label: $label,
                colorHex: $colorHex,
                description: $description
              }
            }')

          echo "üì¶ Payload:"
          echo "$payload" | jq .

          STATUS_CODE=$(curl -s -L -o add_label.json -w "%{response_code}" \
            -X POST \
            -H "Authorization: Bearer $IRM_API_KEY" \
            -H "Content-Type: application/json; charset=utf-8" \
            "$STACK_URL/api/plugins/grafana-irm-app/resources/api/v1/IncidentsService.AddLabel" \
            -d "$payload")

          echo "üì¨ Response (HTTP $STATUS_CODE):"
          cat add_label.json | jq .
